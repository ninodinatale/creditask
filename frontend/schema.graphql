schema {
  query: Query
  mutation: Mutation
}

input ApprovalInput {
  id: ID!
  state: ApprovalState!
  message: String
}

enum ApprovalState {
  NONE
  APPROVED
  DECLINED
}

type ApprovalType {
  id: ID!
  state: ApprovalState!
  message: String!
  task: TaskType!
  user: UserType!
}

type CreateGrocery {
  grocery: GroceryType!
}

enum CreditsCalc {
  BY_FACTOR
  FIXED
}

type CurrentUserType {
  id: ID!
  groupId: ID!
  email: String!
  publicName: String!
}

scalar CustomFloatFactor

scalar CustomFloatFixedCredits

scalar CustomString

scalar Date

scalar DateTime

type DeleteGrocery {
  grocery: GroceryType
}

type ErrorType {
  id: ID!
  user: UserType!
  stackTrace: String!
}

scalar GenericScalar

input GroceryCreateInput {
  name: String!
  info: String!
}

type GroceryType {
  id: ID!
  name: String!
  inCart: Boolean!
  info: String!
}

input GroceryUpdateInput {
  id: ID!
  name: String
  info: String
  inCart: Boolean
}

type Mutation {
  saveError(stackTrace: String!): SaveError
  createGrocery(input: GroceryCreateInput!): CreateGrocery
  updateGrocery(input: GroceryUpdateInput!): UpdateGrocery
  updateGroceries(input: [GroceryUpdateInput]!): UpdateGroceries
  deleteGrocery(id: ID!): DeleteGrocery
  saveApproval(approvalInput: ApprovalInput!): SaveApproval
  saveTask(createInput: TaskInputCreate, updateInput: TaskInputUpdate): SaveTask
  tokenAuth(email: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String!): Verify
  refreshToken(token: String): Refresh
}

type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  user: CurrentUserType
  token: String!
}

type Query {
  notify: String
  allNotInCart: [GroceryType!]!
  allInCart: [GroceryType!]!
  taskChanges(taskId: ID!): [TaskChangeType!]!
  task(id: ID!): TaskType!
  todoTasksOfUser(userEmail: String!): [TaskType!]!
  toApproveTasksOfUser(userEmail: String!): [TaskType!]!
  unassignedTasks: [TaskType!]!
  allTodoTasks: [TaskType!]!
  done: [TaskType!]!
  user(id: ID!): UserType
  users: [UserType!]
  otherUsers(userEmail: String!): [UserType!]
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type SaveApproval {
  approval: ApprovalType!
}

type SaveError {
  error: ErrorType!
}

type SaveTask {
  task: TaskType!
}

enum TaskChangeChangedProperty {
  NAME
  NEEDED_TIME_SECONDS
  STATE
  CREDITS_CALC
  FIXED_CREDITS
  FACTOR
  USER_ID
  PERIOD_START
  PERIOD_END
  APPROVAL
  CREATED_BY_ID
}

type TaskChangeType {
  id: ID!
  currentValue: String
  previousValue: String
  user: UserType!
  task: TaskType!
  timestamp: DateTime!
  changedProperty: TaskChangeChangedProperty
}

input TaskInputCreate {
  name: CustomString!
  creditsCalc: CreditsCalc!
  fixedCredits: CustomFloatFixedCredits
  factor: CustomFloatFactor
  userId: ID
  periodStart: Date
  periodEnd: Date
}

input TaskInputUpdate {
  id: ID!
  state: TaskState
  name: CustomString
  creditsCalc: CreditsCalc
  fixedCredits: CustomFloatFixedCredits
  factor: CustomFloatFactor
  userId: ID
  neededTimeSeconds: Int
  periodStart: Date
  periodEnd: Date
}

enum TaskState {
  TO_DO
  TO_APPROVE
  DECLINED
  APPROVED
  DONE
}

type TaskType {
  id: ID!
  name: String!
  neededTimeSeconds: Int!
  state: TaskState!
  creditsCalc: CreditsCalc!
  factor: Float!
  fixedCredits: Int!
  user: UserType
  createdBy: UserType!
  periodStart: Date!
  periodEnd: Date!
  approvals: [ApprovalType!]!
  taskChanges: [TaskChangeType!]!
}

type UpdateGroceries {
  groceries: [GroceryType!]!
}

type UpdateGrocery {
  grocery: GroceryType!
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime
  email: String!
  publicName: String!
  credits: Int!
  isStaff: Boolean!
  isSuperuser: Boolean!
  isActive: Boolean!
  taskSet: [TaskType!]!
  approvalSet: [ApprovalType!]!
  taskchangeSet: [TaskChangeType!]!
  errorSet: [ErrorType!]!
}

type Verify {
  user: CurrentUserType
}
