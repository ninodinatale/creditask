# # Generated by Django 3.0.4 on 2020-07-26 15:37
# import datetime
#
# from django.conf import settings
# from django.db import migrations
#
# from models import Group, User, Task, TaskState
#
#
# def setup_dev_data(apps, schema_editor):
#     # We can't import the Person model directly as it may be a newer
#     # version than this migration expects. We use the historical version.
#     group_model: Group = apps.get_model('creditask', 'Group')
#     group_1 = group_model.objects.create()
#
#     user_model: User = apps.get_model('creditask', 'User')
#     user_1 = user_model.objects.create(group=group_1, email='nino@mail.com',
#                                        public_name='Nino',
#                                        password='pbkdf2_sha256$180000$90119QHZv'
#                                                 'rGj$JOnEzcVSYNLjlcSALoDdl2+oUm'
#                                                 '3NrYBrnmEkMjT3ecs=')
#     user_2 = user_model.objects.create(group=group_1, email='moro@mail.com',
#                                        public_name='Moro',
#                                        password='pbkdf2_sha256$180000$90119QHZv'
#                                                 'rGj$JOnEzcVSYNLjlcSALoDdl2+oUm'
#                                                 '3NrYBrnmEkMjT3ecs=')
#     user_3 = user_model.objects.create(group=group_1, email='anna@mail.com',
#                                        public_name='Anna',
#                                        password='pbkdf2_sha256$180000$90119QHZv'
#                                                 'rGj$JOnEzcVSYNLjlcSALoDdl2+oUm'
#                                                 '3NrYBrnmEkMjT3ecs=')
#
#     task_group_model: TaskGroup = apps.get_model('creditask', 'TaskGroup')
#     tsk_group_1 = task_group_model.objects.create()
#     tsk_group_2 = task_group_model.objects.create()
#     tsk_group_3 = task_group_model.objects.create()
#     tsk_group_4 = task_group_model.objects.create()
#     tsk_group_5 = task_group_model.objects.create()
#     tsk_group_6 = task_group_model.objects.create()
#
#     rounded_now = datetime.datetime(*datetime.datetime.now().timetuple()[:3])
#     task_model: Task = apps.get_model('creditask', 'Task')
#     task_1 = task_model.objects.create(
#         task_group=tsk_group_1,
#         name='Wischen',
#         needed_time_seconds=0,
#         state=TaskState.TO_DO,
#         user=user_1,
#         created_by=user_1,
#         period_end=rounded_now - datetime.timedelta(days=1)
#     )
#     task_2 = task_model.objects.create(
#         task_group=tsk_group_2,
#         name='Putzen',
#         needed_time_seconds=0,
#         state=TaskState.TO_APPROVE,
#         user=user_1,
#         created_by=user_1,
#         period_end=rounded_now - datetime.timedelta(days=1)
#     )
#     task_3 = task_model.objects.create(
#         task_group=tsk_group_3,
#         name='Kochen',
#         needed_time_seconds=0,
#         state=TaskState.TO_DO,
#         user=user_1,
#         created_by=user_1,
#         period_end=rounded_now
#     )
#     task_4 = task_model.objects.create(
#         task_group=tsk_group_4,
#         name='Kacken',
#         needed_time_seconds=0,
#         state=TaskState.TO_DO,
#         user=user_1,
#         created_by=user_1,
#         period_end=rounded_now + datetime.timedelta(days=1)
#     )
#     task_5 = task_model.objects.create(
#         task_group=tsk_group_5,
#         name='Bislen',
#         needed_time_seconds=0,
#         state=TaskState.TO_DO,
#         user=user_1,
#         created_by=user_1,
#         period_end=rounded_now + datetime.timedelta(days=4)
#     )
#     task_6 = task_model.objects.create(
#         task_group=tsk_group_6,
#         name='Saugen',
#         needed_time_seconds=0,
#         state=TaskState.TO_DO,
#         user=user_1,
#         created_by=user_1,
#         period_end=rounded_now + datetime.timedelta(days=8)
#     )
#
#
# class Migration(migrations.Migration):
#
#     dependencies = [
#         ('creditask', '0001_initial'),
#     ]
#
#     def __init__(self, name, app_label):
#         super().__init__(name, app_label)
#         if getattr(settings, 'DEBUG') is True:
#             self.operations = [
#                 migrations.RunPython(setup_dev_data),
#             ]
