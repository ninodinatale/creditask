# Generated by Django 3.0.4 on 2020-07-26 15:37
import datetime

from django.conf import settings
from django.db import migrations

from models import Group, User, Task, TaskState, TaskChange, ChangeableTaskProperty


def setup_dev_data(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.

    #
    # users
    #
    group_model: Group = apps.get_model('creditask', 'Group')
    group_1 = group_model.objects.create()

    user_model: User = apps.get_model('creditask', 'User')
    user_1 = user_model.objects.create(group=group_1, email='nino@mail.com',
                                       public_name='Nino',
                                       password='pbkdf2_sha256$180000$90119QHZv'
                                                'rGj$JOnEzcVSYNLjlcSALoDdl2+oUm'
                                                '3NrYBrnmEkMjT3ecs=')
    user_2 = user_model.objects.create(group=group_1, email='moro@mail.com',
                                       public_name='Moro',
                                       password='pbkdf2_sha256$180000$90119QHZv'
                                                'rGj$JOnEzcVSYNLjlcSALoDdl2+oUm'
                                                '3NrYBrnmEkMjT3ecs=')
    user_3 = user_model.objects.create(group=group_1, email='anna@mail.com',
                                       public_name='Anna',
                                       password='pbkdf2_sha256$180000$90119QHZv'
                                                'rGj$JOnEzcVSYNLjlcSALoDdl2+oUm'
                                                '3NrYBrnmEkMjT3ecs=')

    #
    # tasks
    #
    rounded_now = datetime.datetime(*datetime.datetime.utcnow().timetuple()[:3])
    task_model: Task = apps.get_model('creditask', 'Task')
    task_1 = task_model.objects.create(
        name='Wischen',
        needed_time_seconds=0,
        state=TaskState.TO_DO,
        user=user_1,
        created_by=user_1,
        period_start=rounded_now - datetime.timedelta(days=2),
        period_end=rounded_now - datetime.timedelta(days=1)
    )
    task_2 = task_model.objects.create(
        name='Putzen',
        needed_time_seconds=0,
        state=TaskState.TO_APPROVE,
        user=user_1,
        created_by=user_1,
        period_start=rounded_now - datetime.timedelta(days=2),
        period_end=rounded_now - datetime.timedelta(days=1)
    )
    task_3 = task_model.objects.create(
        name='Kochen',
        needed_time_seconds=0,
        state=TaskState.TO_DO,
        user=user_1,
        created_by=user_1,
        period_end=rounded_now
    )
    task_4 = task_model.objects.create(
        name='Kacken',
        needed_time_seconds=0,
        state=TaskState.TO_DO,
        user=user_1,
        created_by=user_1,
        period_end=rounded_now + datetime.timedelta(days=1)
    )
    task_5 = task_model.objects.create(
        name='Bislen',
        needed_time_seconds=0,
        state=TaskState.TO_DO,
        user=user_1,
        created_by=user_1,
        period_end=rounded_now + datetime.timedelta(days=4)
    )
    task_6 = task_model.objects.create(
        name='Saugen',
        needed_time_seconds=0,
        state=TaskState.TO_DO,
        user=user_1,
        created_by=user_1,
        period_end=rounded_now + datetime.timedelta(days=8)
    )

    #
    # task changes
    #
    for task in [task_1, task_2, task_3, task_4, task_5, task_6]:
        TaskChange.objects.create(
            task=task,
            user=user_1,
            timestamp=task.created_at,
            created_by=user_1,
        )
        TaskChange.objects.create(
            task=task,
            user=user_2,
            timestamp=task.created_at,
            changed_property=ChangeableTaskProperty.Factor,
            previous_value=1,
            created_by=user_1,
            current_value=2
        )
        TaskChange.objects.create(
            task=task,
            user=user_1,
            timestamp=task.created_at,
            changed_property=ChangeableTaskProperty.NeededTimeSeconds,
            previous_value=120,
            created_by=user_1,
            current_value=560
        )
        TaskChange.objects.create(
            task=task_1,
            user=user_1,
            timestamp=task.created_at,
            changed_property=ChangeableTaskProperty.UserId,
            previous_value=task.user.public_name,
            created_by=user_1,
            current_value=user_3.public_name
        )


class Migration(migrations.Migration):
    # dependencies = [
    #     ('creditask', '0001_initial'),
    # ]

    def __init__(self, name, app_label):
        super().__init__(name, app_label)
        if getattr(settings, 'DEBUG') is True:
            self.operations = [
                migrations.RunPython(setup_dev_data),
            ]
